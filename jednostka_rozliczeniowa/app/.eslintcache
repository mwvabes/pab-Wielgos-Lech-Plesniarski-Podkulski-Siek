[{"/usr/src/app/src/index.js":"1","/usr/src/app/src/reportWebVitals.js":"2","/usr/src/app/src/App.js":"3","/usr/src/app/src/Payments.js":"4","/usr/src/app/src/GeneralInfo.js":"5"},{"size":517,"mtime":1611092306365,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1611092306366,"results":"8","hashOfConfig":"7"},{"size":250,"mtime":1611233004699,"results":"9","hashOfConfig":"7"},{"size":2923,"mtime":1611233741375,"results":"10","hashOfConfig":"7"},{"size":2151,"mtime":1611233986361,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"afg97j",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/usr/src/app/src/index.js",[],"/usr/src/app/src/reportWebVitals.js",[],"/usr/src/app/src/App.js",[],["24","25"],"/usr/src/app/src/Payments.js",["26","27","28"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport 'antd/dist/antd.css';\r\nimport { Button, Divider, Table } from 'antd'\r\n\r\nconst PaymentConfirm = ({confirmPayment, declinePayment, paymentId, status}) => {\r\n  \r\n  if (status === \"in_shipping\") {\r\n    return (\r\n      <>\r\n        <Button onClick={() => confirmPayment(paymentId)} >Potwierdź</Button>\r\n        <Button onClick={() => declinePayment(paymentId)} >Odrzuć</Button>\r\n      </>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <>\r\n        <p>Operacja nie wymaga żadnej akcji</p>\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst Payments = () => {\r\n\r\n  const [paymentsInfo, setPaymentsInfo] = useState([])\r\n  const [sessionStatus, setSessionStatus] = useState(\"Ładowanie informacji o sesji...\")\r\n\r\n  // const [formProductId, setFormProductId] = useState(null)\r\n  // const [formAvailableQuantity, setFormAvailableQuantity] = useState(null)\r\n\r\n  const fetchPayments = () => {\r\n    axios\r\n      .get(`https://jr-api-express.herokuapp.com/api/payment/getCurrentlyServed`)\r\n      .then(response => {\r\n        console.log(\"RES\", response.data)\r\n        if (response.data.nosession) {\r\n          setSessionStatus(\"Brak aktualnie obsługiwanej sesji\")\r\n          setPaymentsInfo([])\r\n        } else {\r\n          setSessionStatus(`Aktualnie obsługiwane przelewy sesji ${response.data.session}`)\r\n          setPaymentsInfo(response.data.payments)\r\n        }\r\n        \r\n      })\r\n      .catch(e => console.log(e))\r\n  }\r\n\r\n  useEffect(fetchPayments, [])\r\n\r\n  const confirmPayment = (paymentId) => {\r\n    axios\r\n      .post(`https://jr-api-express.herokuapp.com/api/payments/getCurrentlyServed`)\r\n      .then(response => {\r\n        fetchPayments()\r\n      })\r\n  }\r\n\r\n  \r\n  const declinePayment = (paymentId) => {\r\n    axios\r\n      .post(`https://jr-api-express.herokuapp.com/api/payments/getCurrentlyServed`)\r\n      .then(response => {\r\n        fetchPayments()\r\n      })\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Nadawca',\r\n      dataIndex: 'senderAccountnumber',\r\n      key: 'senderAccountnumber',\r\n      render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: 'Odbiorca',\r\n      dataIndex: 'recipientAccountnumber',\r\n      key: 'recipientAccountnumber',\r\n      render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: 'Kwota',\r\n      dataIndex: 'paymentAmount',\r\n      key: 'paymentAmount',\r\n      render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: 'Szczegóły',\r\n      dataIndex: '',\r\n      key: 'confirmation',\r\n      render: (text, row) => <PaymentConfirm paymentId={row._id} status={row.paymentStatus} confirmPayment={confirmPayment} declinePayment={declinePayment} />,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <Divider orientation=\"left\">{sessionStatus}</Divider>\r\n      <Table columns={columns} dataSource={paymentsInfo} rowKey={paymentsInfo => paymentsInfo._id}\r\n        \r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Payments","/usr/src/app/src/GeneralInfo.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":75,"column":23,"nodeType":"35","endLine":75,"endColumn":26},{"ruleId":"33","severity":1,"message":"34","line":81,"column":23,"nodeType":"35","endLine":81,"endColumn":26},{"ruleId":"33","severity":1,"message":"34","line":87,"column":23,"nodeType":"35","endLine":87,"endColumn":26},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]